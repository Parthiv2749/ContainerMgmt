{"ast":null,"code":"var _jsxFileName = \"D:\\\\WorkPlace\\\\Seychelles_Sahaj\\\\containermgmt\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || null);\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem(\"refreshToken\") || null);\n\n  // Login function\n  const login = (accessToken, refresh) => {\n    localStorage.setItem(\"token\", accessToken);\n    localStorage.setItem(\"refreshToken\", refresh);\n    setToken(accessToken);\n    setRefreshToken(refresh);\n    consoel;\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"refreshToken\");\n    setToken(null);\n    setRefreshToken(null);\n  };\n\n  // Function to refresh the access token using the refresh token\n  const refreshAccessToken = async () => {\n    if (!refreshToken) return null;\n    try {\n      const response = await fetch(`http://${process.env.REACT_APP_NETWORK}:${process.env.REACT_APP_PORT}/refresh`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh_token: refreshToken\n        })\n      });\n      if (!response.ok) {\n        logout(); // Clean up if refresh fails\n        return null;\n      }\n      const data = await response.json();\n      const newAccessToken = data.access_token;\n      localStorage.setItem(\"token\", newAccessToken);\n      setToken(newAccessToken);\n      return newAccessToken;\n    } catch (err) {\n      console.error(\"Error refreshing token:\", err);\n      logout(); // Clean up on failure\n      return null;\n    }\n  };\n\n  // Automatic token refresh when app loads if a token is available\n  useEffect(() => {\n    const refreshOnLoad = async () => {\n      if (token) {\n        await refreshAccessToken(); // Try to refresh if a token exists\n      }\n    };\n    refreshOnLoad();\n  }, [token, refreshAccessToken]); // Add refreshAccessToken to the dependency array\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      refreshAccessToken,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"dPuP6nCulOaaTu5B7SvUeRH9r6I=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","refreshToken","setRefreshToken","login","accessToken","refresh","setItem","consoel","logout","removeItem","refreshAccessToken","response","fetch","process","env","REACT_APP_NETWORK","REACT_APP_PORT","method","headers","body","JSON","stringify","refresh_token","ok","data","json","newAccessToken","access_token","err","console","error","refreshOnLoad","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/WorkPlace/Seychelles_Sahaj/containermgmt/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// Create Context\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || null);\r\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem(\"refreshToken\") || null);\r\n\r\n  // Login function\r\n  const login = (accessToken, refresh) => {\r\n    localStorage.setItem(\"token\", accessToken);\r\n    localStorage.setItem(\"refreshToken\", refresh);\r\n    setToken(accessToken);\r\n    setRefreshToken(refresh);\r\n    consoel\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n    setToken(null);\r\n    setRefreshToken(null);\r\n  };\r\n\r\n  // Function to refresh the access token using the refresh token\r\n  const refreshAccessToken = async () => {\r\n    if (!refreshToken) return null;\r\n\r\n    try {\r\n      const response = await fetch(`http://${process.env.REACT_APP_NETWORK}:${process.env.REACT_APP_PORT}/refresh`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ refresh_token: refreshToken }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        logout(); // Clean up if refresh fails\r\n        return null;\r\n      }\r\n\r\n      const data = await response.json();\r\n      const newAccessToken = data.access_token;\r\n\r\n      localStorage.setItem(\"token\", newAccessToken);\r\n      setToken(newAccessToken);\r\n      return newAccessToken;\r\n    } catch (err) {\r\n      console.error(\"Error refreshing token:\", err);\r\n      logout(); // Clean up on failure\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Automatic token refresh when app loads if a token is available\r\n  useEffect(() => {\r\n    const refreshOnLoad = async () => {\r\n      if (token) {\r\n        await refreshAccessToken(); // Try to refresh if a token exists\r\n      }\r\n    };\r\n    refreshOnLoad();\r\n  }, [token, refreshAccessToken]);  // Add refreshAccessToken to the dependency array\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ token, refreshAccessToken, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}