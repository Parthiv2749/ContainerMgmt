{"ast":null,"code":"var _s = $RefreshSig$();\n// src/utils/authFetch.js\n\nimport { useAuth } from \"../context/AuthContext\";\nexport const useAuthFetch = () => {\n  _s();\n  const {\n    accessToken,\n    refreshAccessToken,\n    logout\n  } = useAuth();\n  const authFetch = async (url, options = {}) => {\n    let token = accessToken;\n    options.headers = {\n      ...(options.headers || {}),\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n    let response = await fetch(url, options);\n\n    // If access token expired, try to refresh\n    if (response.status === 401) {\n      try {\n        const newToken = await refreshAccessToken();\n        if (!newToken) throw new Error(\"Failed to refresh token\");\n        options.headers.Authorization = `Bearer ${newToken}`;\n        response = await fetch(url, options);\n      } catch (err) {\n        logout();\n        throw new Error(\"Session expired, please login again\");\n      }\n    }\n    return response;\n  };\n  return authFetch;\n};\n_s(useAuthFetch, \"PbTax7f7vIOUGXHYHE02vjM8k0g=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useAuth","useAuthFetch","_s","accessToken","refreshAccessToken","logout","authFetch","url","options","token","headers","Authorization","response","fetch","status","newToken","Error","err"],"sources":["D:/WorkPlace/Seychelles_Sahaj/containermgmt/src/utils/authFetch.js"],"sourcesContent":["\r\n// src/utils/authFetch.js\r\n\r\nimport { useAuth } from \"../context/AuthContext\";\r\n\r\nexport const useAuthFetch = () => {\r\n  const { accessToken, refreshAccessToken, logout } = useAuth();\r\n\r\n  const authFetch = async (url, options = {}) => {\r\n    let token = accessToken;\r\n\r\n    options.headers = {\r\n      ...(options.headers || {}),\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n\r\n    let response = await fetch(url, options);\r\n\r\n    // If access token expired, try to refresh\r\n    if (response.status === 401) {\r\n      try {\r\n        const newToken = await refreshAccessToken();\r\n        if (!newToken) throw new Error(\"Failed to refresh token\");\r\n\r\n        options.headers.Authorization = `Bearer ${newToken}`;\r\n        response = await fetch(url, options);\r\n      } catch (err) {\r\n        logout();\r\n        throw new Error(\"Session expired, please login again\");\r\n      }\r\n    }\r\n\r\n    return response;\r\n  };\r\n\r\n  return authFetch;\r\n};\r\n"],"mappings":";AACA;;AAEA,SAASA,OAAO,QAAQ,wBAAwB;AAEhD,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC,WAAW;IAAEC,kBAAkB;IAAEC;EAAO,CAAC,GAAGL,OAAO,CAAC,CAAC;EAE7D,MAAMM,SAAS,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC7C,IAAIC,KAAK,GAAGN,WAAW;IAEvBK,OAAO,CAACE,OAAO,GAAG;MAChB,IAAIF,OAAO,CAACE,OAAO,IAAI,CAAC,CAAC,CAAC;MAC1BC,aAAa,EAAE,UAAUF,KAAK,EAAE;MAChC,cAAc,EAAE;IAClB,CAAC;IAED,IAAIG,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAEC,OAAO,CAAC;;IAExC;IACA,IAAII,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,kBAAkB,CAAC,CAAC;QAC3C,IAAI,CAACW,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;QAEzDR,OAAO,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUI,QAAQ,EAAE;QACpDH,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAEC,OAAO,CAAC;MACtC,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZZ,MAAM,CAAC,CAAC;QACR,MAAM,IAAIW,KAAK,CAAC,qCAAqC,CAAC;MACxD;IACF;IAEA,OAAOJ,QAAQ;EACjB,CAAC;EAED,OAAON,SAAS;AAClB,CAAC;AAACJ,EAAA,CAhCWD,YAAY;EAAA,QAC6BD,OAAO;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}